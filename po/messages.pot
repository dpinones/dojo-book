
msgid ""
msgstr ""
"Project-Id-Version: Building Autonomous Worlds with Dojo\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: src/SUMMARY.md:3
msgid "Introduction"
msgstr ""

#: src/SUMMARY.md:4
msgid "AW Theory"
msgstr ""

#: src/SUMMARY.md:5
msgid "Cairo Ecosystem"
msgstr ""

#: src/SUMMARY.md:7
msgid "Getting Started"
msgstr ""

#: src/SUMMARY.md:9
msgid "Installation"
msgstr ""

#: src/SUMMARY.md:11
msgid "Development"
msgstr ""

#: src/SUMMARY.md:13
msgid "Setup"
msgstr ""

#: src/SUMMARY.md:15
msgid "Dojo Engine"
msgstr ""

#: src/SUMMARY.md:17
msgid "Overview"
msgstr ""

#: src/SUMMARY.md:18
msgid "Cairo ECS"
msgstr ""

#: src/SUMMARY.md:19
msgid "World"
msgstr ""

#: src/SUMMARY.md:20
msgid "Authorization"
msgstr ""

#: src/SUMMARY.md:21
msgid "Components"
msgstr ""

#: src/SUMMARY.md:22
msgid "Systems"
msgstr ""

#: src/SUMMARY.md:23
msgid "Entities"
msgstr ""

#: src/SUMMARY.md:24
msgid "Commands"
msgstr ""

#: src/SUMMARY.md:25
msgid "Storage"
msgstr ""

#: src/SUMMARY.md:26
msgid "Sozo"
msgstr ""

#: src/SUMMARY.md:27
msgid "Katana"
msgstr ""

#: src/SUMMARY.md:28
msgid "Torii"
msgstr ""

#: src/SUMMARY.md:30
msgid "Appendix"
msgstr ""

#: src/SUMMARY.md:32
msgid "References"
msgstr ""

#: src/SUMMARY.md:33
msgid "'sozo' Commands"
msgstr ""

#: src/SUMMARY.md:34
msgid "Project Commands"
msgstr ""

#: src/SUMMARY.md:35
msgid "init"
msgstr ""

#: src/SUMMARY.md:36
msgid "build"
msgstr ""

#: src/SUMMARY.md:37
msgid "test"
msgstr ""

#: src/SUMMARY.md:38
msgid "migrate"
msgstr ""

#: src/SUMMARY.md:39
msgid "World Commands"
msgstr ""

#: src/SUMMARY.md:40
msgid "execute"
msgstr ""

#: src/SUMMARY.md:41
msgid "register"
msgstr ""

#: src/SUMMARY.md:42
msgid "system"
msgstr ""

#: src/SUMMARY.md:43
msgid "component"
msgstr ""

#: src/SUMMARY.md:44
msgid "'katana' Reference"
msgstr ""

#: src/SUMMARY.md:48
msgid "Contributors"
msgstr ""

#: src/index.md:1
msgid "## Dojo: The provable games engine"
msgstr ""

#: src/index.md:3
msgid ""
"This guide is dedicated to familiarizing you with the Dojo engine and the "
"transformative potential of Provable games. A special section on the "
"[Theory](./theory/autonomous-worlds.md) elucidates this emergent concept of "
"autonomous worlds and Provable games."
msgstr ""

#: src/index.md:5
msgid "## What is Dojo?"
msgstr ""

#: src/index.md:6
msgid ""
"Dojo is a provable game engine with an integrated toolchain, designed for "
"creating onchain games and autonomous worlds using [Cairo "
"1.0](https://github.com/starkware-libs/cairo). It employs an [entity "
"component system](https://en.wikipedia.org/wiki/Entity_component_system) and "
"a [diamond pattern](https://eips.ethereum.org/EIPS/eip-2535), facilitating a "
"modular, scalable world. Worlds grow via the addition of Components (state) "
"and Systems (logic). Our architectural design is greatly influenced by the "
"brilliant [Bevy](https://bevyengine.org/) engine."
msgstr ""

#: src/index.md:8
msgid ""
"Here's a video of [Cartridge](https://cartridge.gg/)'s "
"[Tarrence](https://twitter.com/tarrenceva) explaining how Dojo works at the "
"2023 [Autonomous Anonymous "
"Summit](https://twitter.com/pet3rpan_/status/1666764726427353091):"
msgstr ""

#: src/index.md:10
msgid ""
"<video controls "
"poster=\"https://gf326cjag4w6pdpc42qp22enfhxsywmq6sgs7mkxbn6el7aioyxa.arweave.net/MXevCSA3LeeN4uag_WiNKe8sWZD0jS-xVwt8RfwIdi4\">\n"
"  <source "
"src=\"https://sfx25btazqz62pajxecorlp4exskwgokakub44rxmpnsosep5iqa.arweave.net/kW-uhmDMM-08CbkE6K38JeSrGcoCqB5yN2PbJ0iP6iA\" "
"type=\"video/mp4\">\n"
"  Your browser does not support the video tag.\n"
"</video>"
msgstr ""

#: src/index.md:17
msgid "#### Key Features"
msgstr ""

#: src/index.md:18
msgid ""
"- Entity Component System (ECS) built on [Cairo "
"1.0](https://github.com/starkware-libs/cairo)\n"
"- [Sozo](./framework/sozo/overview.md) world migration planner\n"
"- [Torii](./framework/torii/overview.md) networking and indexing stack\n"
"- [Katana](./framework/katana/overview.md) RPC development network\n"
"- Typed SDKs"
msgstr ""

#: src/index.md:24
msgid ""
"> Dojo is an open-source project, currently in its early development phase, "
"and warmly welcomes contributors. For additional resources, find the book on "
"[Github](https://github.com/dojoengine/book)."
msgstr ""

#: src/index.md:27
msgid "### Why Dojo?"
msgstr ""

#: src/index.md:29
msgid ""
"Dojo is the culmination of lessons learned from attempts at building "
"[onchain games](https://naavik.co/digest/primer-fully-on-chain-gaming), an "
"emerging sector in the gaming industry. Any developer who has endeavored to "
"build an onchain game appreciates the inherent engineering hurdles - a "
"realization that drove us to create Dojo. Just as you wouldn't recreate "
"Unity every time you develop a new game, the same principle applies here. "
"Dojo is designed to handle the complex infrastructure, allowing developers "
"to focus on the unique aspects of their games."
msgstr ""

#: src/index.md:32
msgid "### Why Cairo & Starknet?"
msgstr ""

#: src/index.md:34
msgid ""
"Provable games demand "
"[zero-knowledge](https://ethereum.org/en/zero-knowledge-proofs/) properties "
"for efficient scaling and verification of computations. "
"[Cairo](https://book.starknet.io/chapter_1/what_is_cairo.html) addresses "
"this need by providing a generalized language, eliminating the complexity of "
"creating circuits to incorporate "
"[SNARKs](https://consensys.net/blog/developers/introduction-to-zk-snarks/). "
msgstr ""

#: src/index.md:36
msgid ""
"**You can simply program in Cairo and your applications become automatically "
"provable**. "
msgstr ""

#: src/index.md:38
msgid ""
"Moreover, you can deploy your programs on the [Cairo Virtual "
"Machine](https://medium.com/starkware/cairo-welcome-on-board-1cf3487554f) "
"(CVM), which is compatible with Starknet's Layer 2, Starknet appchains, and "
"even in-browser through WebAssembly (WASM)! Dojo aims to supply "
"straightforward ZK primitives to fuel your game development."
msgstr ""

#: src/index.md:40
msgid ""
"For more information about Starknet, Cairo and its tech stack, check out the "
"[Starknet & Cairo book](https://book.starknet.io/)."
msgstr ""

#: src/index.md:44
msgid "### Vision"
msgstr ""

#: src/index.md:45
msgid ""
"Dojo is a bold work in progress, aimed at empowering developers to construct "
"onchain games and Autonomous Worlds (AWs) within hours, not weeks."
msgstr ""

#: src/index.md:47
msgid "### Organizational Structure"
msgstr ""

#: src/index.md:48
msgid ""
"Dojo is an open-source initiative, licensed under MIT, dedicated to "
"promoting and advancing the concept of Autonomous Worlds (AWs). It is "
"spearheaded by [Cartridge](https://cartridge.gg/), [Realms & "
"BibliothecaDAO](https://bibliothecadao.xyz/), "
"[briq](https://briq.construction/) and many more "
"[contributors](https://github.com/orgs/dojoengine/people)."
msgstr ""

#: src/index.md:50
msgid "### How do I get involved?"
msgstr ""

#: src/index.md:52
msgid ""
"Check out our [Github](https://github.com/dojoengine), our "
"[Twitter](https://twitter.com/dojostarknet), "
"[Discord](https://discord.gg/vUN4Xq9Qv6) and [contribution "
"guide](https://book.dojoengine.org/misc/contributors.html!)"
msgstr ""

#: src/theory/autonomous-worlds.md:1
msgid "## Autonomous Worlds"
msgstr ""

#: src/theory/autonomous-worlds.md:3
msgid ""
"> \"Autonomous worlds represent persistent, permissionless, and "
"decentralized open environments that users can freely interact with and "
"contribute to.\""
msgstr ""

#: src/theory/autonomous-worlds.md:5
msgid ""
"The precise definition of Autonomous Worlds (AWs) remains somewhat elusive, "
"as it is more of an abstract concept that has yet to be fully crystallized. "
"Lattice first [introduced](https://0xparc.org/blog/autonomous-worlds) the "
"terminology in 2022, but the notion of open worlds operating on the "
"blockchain has been around for a while. The abstraction introduced by MUD "
"served as a catalyst for the market to recognize the potential of these "
"worlds."
msgstr ""

#: src/theory/autonomous-worlds.md:7
msgid ""
"Autonomous Worlds share notable similarities with blockchains in their "
"fundamental nature. Once established, they persist, maintaining their state "
"throughout the lifespan of the chain. Players can join or leave, and "
"developers can expand these worlds by deploying features in a permissionless "
"manner, much like how contracts are added to a chain. While there is no "
"universally accepted definition for an Autonomous World, we believe that a "
"game must possess at least the following two essential features to be "
"considered as such:"
msgstr ""

#: src/theory/autonomous-worlds.md:9
msgid ""
"1. Decentralized data availability layer: While the state execution may "
"reside on a centralized layer, it is crucial that the state can be "
"reconstructed if the execution layer ceases to exist. Rollups offer a "
"solution, providing increased capacity execution layers while ensuring data "
"is permanently settled on Ethereum. This guarantees the world's perpetual "
"persistence.\n"
"\n"
"2. Permissionless entry point for expanding the world: The World contract "
"must be capable of accepting new systems and components without requiring "
"permission. While this doesn't imply that every component and system will be "
"utilized, they must adhere to this pattern, ensuring open and unrestricted "
"access for potential enhancements."
msgstr ""

#: src/theory/autonomous-worlds.md:13
msgid ""
"We're firm believers in the potential for Autnomous Worlds to catalize the "
"exploration of novel forms in the medium provided by zk proofs and "
"blockchain technology. This is not only about games, but also about new "
"forms of artwork, coordination, fun, emerging from tinkering and radical "
"innovation, eventually questioning the very notion of \"play\" in this brave "
"new decentralized and trustless world."
msgstr ""

#: src/theory/autonomous-worlds.md:15
msgid "### Homework"
msgstr ""

#: src/theory/autonomous-worlds.md:16
msgid ""
"- [Wired - Autonomous Worlds "
"Primer](https://www.wired.com/story/autonomous-worlds-aim-to-free-online-games-from-corporate-control/)\n"
"- [0xParc - Autonomous Worlds (Part "
"1)](https://0xparc.org/blog/autonomous-worlds)\n"
"- [Gubsheep - The Strongest Crypto Gaming "
"Thesis](https://gubsheep.substack.com/p/the-strongest-crypto-gaming-thesis)\n"
"- [Lattice - MUD: An engine for Autonomous "
"Worlds](https://lattice.xyz/blog/mud-an-engine-for-autonomous-worlds)\n"
"- [Guiltygyoza - Game 2.0](https://www.guiltygyoza.xyz/2022/07/game2)\n"
"- [Guiltygyoza - Composable "
"Engineering](https://www.guiltygyoza.xyz/2023/05/composable-engineering)\n"
"- [Jay Springett - Wind-up "
"Worlds](https://www.thejaymo.net/2022/05/06/wind-up-worlds/)\n"
"- [Are.na collection on Autonomous "
"Worlds](https://www.are.na/sylve-chevet/on-chain-realities-and-autonomous-worlds)"
msgstr ""

#: src/theory/cairo.md:1
msgid "## Cairo"
msgstr ""

#: src/theory/cairo.md:3
msgid ""
"Cairo is an open-source, Turing-complete smart contract language developed "
"by Starkware, designed to power the Validity Rollup Starknet. The language "
"enables highly expressive and verifiable computation, making it well-suited "
"for building scalable and secure applications, including decentralized "
"finance (DeFi) projects."
msgstr ""

#: src/theory/cairo.md:5
msgid ""
"Dojo builds on Cairo to create a robust framework for developing Autonomous "
"Worlds (AWs). By leveraging the capabilities of Cairo, Dojo aims to "
"streamline the development process, improve maintainability, and enhance the "
"performance of AWs."
msgstr ""

#: src/theory/cairo.md:7
msgid ""
"A key feature of the Dojo framework is its use of "
"[commands](../framework/cairo/commands.md). Commands are a design pattern "
"that helps to reduce boilerplate code, resulting in cleaner and more "
"maintainable applications. They achieve this by encapsulating specific "
"actions or operations within self-contained, reusable units."
msgstr ""

#: src/theory/cairo.md:9
msgid ""
"Developers can write commands freely within Systems, and the Cairo compiler "
"takes care of inlining the appropriate functions. "
msgstr ""

#: src/theory/cairo.md:11
msgid "#### Essential Reading"
msgstr ""

#: src/theory/cairo.md:12
msgid ""
"- [Cairo book](https://cairo-book.github.io/)\n"
"- [Awesome Cairo](https://github.com/auditless/awesome-cairo)\n"
"- [Starknet Book](https://book.starknet.io/)"
msgstr ""

#: src/theory/cairo.md:16
msgid "### Starknet as an L2"
msgstr ""

#: src/theory/cairo.md:18
msgid ""
"Starknet is a Validity Rollup Layer 2 (L2) solution designed to scale "
"Ethereum. It operates by offering high transaction throughput and low gas "
"costs while maintaining the same level of security as Ethereum Layer 1 (L1). "
"The strategy it uses is akin to solving a sudoku puzzle: verifying a "
"solution is easier than finding the solution from scratch. Similarly, "
"Starknet replaces heavy and costly L1 computation with cheaper L1 "
"verification through the use of STARK proofs computed off-chain."
msgstr ""

#: src/theory/cairo.md:20
msgid ""
"In more technical terms, Starknet is a permissionless Validity-Rollup (also "
"known as a \"ZK-Rollup\") that supports general computation and currently "
"runs as an L2 network over Ethereum. The network's L1 security is guaranteed "
"by its utilization of the STARK cryptographic proof system, which is "
"considered one of the safest and most scalable."
msgstr ""

#: src/theory/cairo.md:22
msgid "### Starknet as an Appchain"
msgstr ""

#: src/theory/cairo.md:24
msgid ""
"Cairo is an isomorphic, general-purpose language, optimized for "
"Zero-Knowledge (ZK) proofs. It's the driving force behind Starknet, Starkex, "
"and appchains. Remarkably, you can also run it in WebAssembly (WASM) to "
"generate proofs on the client-side! The Dojo team is working closely with "
"the [Madara](https://github.com/keep-starknet-strange/madara) team to enable "
"Starknet appchains to seamlessly run Dojo worlds."
msgstr ""

#: src/getting-started/installation.md:1
#: src/framework/sozo/overview.md:9
#: src/framework/katana/overview.md:9
msgid "## Installation"
msgstr ""

#: src/getting-started/installation.md:3
msgid "### Precompiled binaries"
msgstr ""

#: src/getting-started/installation.md:5
msgid ""
"Precompiled binaries are available from the [GitHub releases "
"page](https://github.com/dojoengine/dojo/releases).\n"
"These are better managed by using [Dojoup](#using-dojoup)."
msgstr ""

#: src/getting-started/installation.md:8
msgid "### Using Dojoup"
msgstr ""

#: src/getting-started/installation.md:10
msgid ""
"Dojoup is the Dojo toolchain installer. You can find more about it "
"[here](https://github.com/dojoengine/dojo/blob/master/dojoup/README.md)."
msgstr ""

#: src/getting-started/installation.md:12
msgid "Open your terminal and run the following command:"
msgstr ""

#: src/getting-started/installation.md:14
msgid ""
"```sh\n"
"curl -L https://install.dojoengine.org | bash\n"
"```"
msgstr ""

#: src/getting-started/installation.md:18
msgid ""
"This will install Dojoup, then simply follow the instructions on-screen,\n"
"which will make the `dojoup` command available in your CLI."
msgstr ""

#: src/getting-started/installation.md:21
msgid ""
"Running `dojoup` by itself will install the latest (nightly) [precompiled "
"binaries](#precompiled-binaries): `sozo`, `katana`, and `torii`.\n"
"See `dojoup --help` for more options, like installing from a specific "
"version or commit."
msgstr ""

#: src/getting-started/installation.md:24
msgid ""
"> ℹ️ **Note**\n"
">\n"
"> If you're on Windows, you will need to install and use [Git "
"BASH](https://gitforwindows.org/) or "
"[WSL](https://learn.microsoft.com/en-us/windows/wsl/install),\n"
"> as your terminal, since Dojoup currently does not support Powershell or "
"Cmd."
msgstr ""

#: src/getting-started/installation.md:29
msgid "### Building from source"
msgstr ""

#: src/getting-started/installation.md:31
msgid "#### Prerequisites"
msgstr ""

#: src/getting-started/installation.md:33
msgid ""
"You will need the [Rust](https://rust-lang.org) compiler and Cargo, the Rust "
"package manager.\n"
"The easiest way to install both is with [`rustup.rs`](https://rustup.rs/)."
msgstr ""

#: src/getting-started/installation.md:36
msgid ""
"On Windows, you will also need a recent version of [Visual "
"Studio](https://visualstudio.microsoft.com/downloads/),\n"
"installed with the \"Desktop Development With C++\" Workloads option."
msgstr ""

#: src/getting-started/installation.md:39
msgid "#### Building"
msgstr ""

#: src/getting-started/installation.md:41
msgid "You can either use the different [Dojoup](#using-dojoup) flags:"
msgstr ""

#: src/getting-started/installation.md:43
msgid ""
"```sh\n"
"dojoup --branch master\n"
"dojoup --path path/to/dojo\n"
"```"
msgstr ""

#: src/getting-started/installation.md:48
msgid "Or, by using a single Cargo command:"
msgstr ""

#: src/getting-started/installation.md:50
msgid ""
"```sh\n"
"cargo install --git https://github.com/dojoengine/dojo --force sozo katana "
"torii\n"
"```"
msgstr ""

#: src/getting-started/installation.md:54
msgid ""
"Or, by manually building from a local copy of the [Dojo "
"repository](https://github.com/dojoengine/dojo):"
msgstr ""

#: src/getting-started/installation.md:56
msgid ""
"```sh\n"
"# clone the repository\n"
"git clone https://github.com/dojoengine/dojo.git\n"
"cd dojo\n"
"# install Sozo\n"
"cargo install --path ./crates/sozo --force\n"
"# install Katana\n"
"cargo install --path ./crates/katana --force\n"
"# install Torii\n"
"cargo install --path ./crates/torii --force\n"
"```"
msgstr ""

#: src/development/setup.md:1
msgid "# Dojo Engine - Getting Started Guide"
msgstr ""

#: src/development/setup.md:3
msgid ""
"This README guides you through the process of setting up your local "
"development environment for Dojo."
msgstr ""

#: src/development/setup.md:5
msgid "## Prerequisites"
msgstr ""

#: src/development/setup.md:7
msgid "- Rust\n- Cairo"
msgstr ""

#: src/development/setup.md:10
msgid "## Clone the Repository"
msgstr ""

#: src/development/setup.md:12
msgid "First, clone the repository to your local machine:"
msgstr ""

#: src/development/setup.md:14
msgid ""
"```bash\n"
"git clone https://github.com/dojoengine/dojo.git\n"
"```"
msgstr ""

#: src/development/setup.md:18
msgid "## Setup Guide"
msgstr ""

#: src/development/setup.md:20
msgid "### Linux & Mac"
msgstr ""

#: src/development/setup.md:22
msgid "#### 1. Install Rust and Dependencies"
msgstr ""

#: src/development/setup.md:24
msgid ""
"Start by installing Rust and running the test suite to confirm your setup:"
msgstr ""

#: src/development/setup.md:26
msgid ""
"```bash\n"
"rustup override set stable && rustup update && cargo test\n"
"```"
msgstr ""

#: src/development/setup.md:30
msgid ""
"> Note: Depending on your Linux distribution, you may need to install "
"additional dependencies. Make sure to install any suggested or missing "
"dependencies that arise during the setup process."
msgstr ""

#: src/development/setup.md:32
msgid "#### 2. Install Scarb Package Manager"
msgstr ""

#: src/development/setup.md:34
msgid ""
"Next, install the [Scarb](https://docs.swmansion.com/scarb) package manager "
"by running:"
msgstr ""

#: src/development/setup.md:36
msgid ""
"```bash\n"
"curl --proto '=https' --tlsv1.2 -sSf "
"https://docs.swmansion.com/scarb/install.sh | sh\n"
"```"
msgstr ""

#: src/development/setup.md:40
msgid "#### 3. Setup Cairo VSCode Extension"
msgstr ""

#: src/development/setup.md:42
msgid ""
"For proper linting and syntax highlighting, you should install the Cairo 1.0 "
"extension for Visual Studio Code."
msgstr ""

#: src/development/setup.md:44
msgid ""
"- Clone the Cairo repository somewhere on your machine (make sure not to "
"clone within the Dojo directory)."
msgstr ""

#: src/development/setup.md:46
msgid ""
"```bash\n"
"git clone https://github.com/starkware-libs/cairo.git\n"
"```"
msgstr ""

#: src/development/setup.md:50
msgid ""
"- Install the Cairo Language Server extension. Here's a step-by-step guide, "
"or you can follow the [official "
"instructions](https://github.com/starkware-libs/cairo/blob/main/vscode-cairo/README.md)."
msgstr ""

#: src/development/setup.md:52
msgid "Navigate to the vscode-cairo directory:"
msgstr ""

#: src/development/setup.md:54
msgid ""
"```bash\n"
"cd cairo/vscode-cairo\n"
"```"
msgstr ""

#: src/development/setup.md:58
msgid "Install the required packages:"
msgstr ""

#: src/development/setup.md:60
msgid ""
"```bash\n"
"sudo npm install --global @vscode/vsce\n"
"npm install\n"
"```"
msgstr ""

#: src/development/setup.md:65
msgid "Package the extension:"
msgstr ""

#: src/development/setup.md:67
msgid ""
"```bash\n"
"vsce package\n"
"```"
msgstr ""

#: src/development/setup.md:71
msgid "Install the extension:"
msgstr ""

#: src/development/setup.md:73
msgid ""
"```bash\n"
"code --install-extension cairo1*.vsix\n"
"```"
msgstr ""

#: src/development/setup.md:77
msgid ""
"> **Mac Tip:** If you don't have the `code` command, in VSCode do "
"`Cmd+Shift+P` and type 'shell command' to find the Shell Command: Install "
"'code' command in PATH command."
msgstr ""

#: src/development/setup.md:79
msgid ""
"The Cairo language server should now be installed globally in your Visual "
"Studio Code. If you have the server enabled, Scarb should automatically pick "
"this up and start linting your Cairo files."
msgstr ""

#: src/development/setup.md:81
msgid "### Windows"
msgstr ""

#: src/development/setup.md:83
#: src/development/setup.md:87
msgid "_Coming soon_"
msgstr ""

#: src/development/setup.md:85
msgid "### Container"
msgstr ""

#: src/framework.md:1
msgid "## Framework"
msgstr ""

#: src/framework.md:3
msgid "### Cairo"
msgstr ""

#: src/framework.md:4
msgid ""
"- [Overview](./framework/cairo/overview.md)\n"
"- [World](./framework/cairo/world.md)\n"
"- [Components](./framework/cairo/components.md)\n"
"- [Systems](./framework/cairo/systems.md)\n"
"- [Entities](./framework/cairo/entities.md)\n"
"- [Commands](./framework/cairo/commands.md)\n"
"- [Storage](./framework/cairo/storage.md)"
msgstr ""

#: src/framework.md:13
msgid "### Tooling"
msgstr ""

#: src/framework.md:15
msgid ""
"Dojo comes with batteries included to power your games. There are 3 core "
"tools which you will use to build your worlds."
msgstr ""

#: src/framework.md:17
msgid ""
"- [Sozo](./framework/sozo/overview.md)\n"
"- [Katana](./framework/katana/overview.md)\n"
"- [Torii](./framework/torii/overview.md)"
msgstr ""

#: src/framework/cairo/overview.md:1
msgid "## Overview"
msgstr ""

#: src/framework/cairo/overview.md:3
msgid ""
"Dojo employs the ECS (Entity Component System) as an architectural pattern "
"to efficiently manage and organize the state and behavior of Autonomous "
"Worlds (AWs). In this pattern, computation is defined as a list of systems "
"operating on a set of entities, each of which consists of a dynamic set of "
"pure data components. Systems select the entities to process via persistent "
"and efficient queries over the entities' components."
msgstr ""

#: src/framework/cairo/overview.md:5
msgid ""
"It is worth reading this excellent "
"[FAQ](https://github.com/SanderMertens/ecs-faq) on ECS"
msgstr ""

#: src/framework/cairo/overview.md:7
msgid "### Understanding the ECS in Dojo"
msgstr ""

#: src/framework/cairo/overview.md:9
msgid ""
"The Entity Component System (ECS) forms the backbone of the Dojo engine. "
"Here's an overview of its core elements:"
msgstr ""

#: src/framework/cairo/overview.md:11
msgid ""
"1. **Entities**: Unique objects that can bear multiple components. They are "
"identifiable through unique IDs.\n"
"2. **Components**: Diverse attributes of an entity, such as geometry, "
"physics, and hit points. Components are exclusively responsible for data "
"storage.\n"
"3. **Systems**: Segments of code that manage entities and alter components.\n"
"4. **Queries**: Utilized by systems to select entities based on the "
"associated components.\n"
"5. **World**: A comprehensive container for entities, components, systems, "
"and queries."
msgstr ""

#: src/framework/cairo/overview.md:19
msgid "### Building an Autonomous World with Dojo"
msgstr ""

#: src/framework/cairo/overview.md:21
msgid "Follow these steps to effectively create a Dojo world:"
msgstr ""

#: src/framework/cairo/overview.md:23
msgid ""
"1. **Conceptualize Entities**: Visualize the entities that will populate "
"your world.\n"
"2. **Recognize Shared Attributes**: Determine common characteristics of your "
"entities, such as position, name, or health.\n"
"3. **Construct Reusable Components**: Create versatile components derived "
"from these shared attributes.\n"
"4. **Develop Specialized Systems**: Design systems that are adept at "
"performing a specific task."
msgstr ""

#: src/framework/cairo/overview.md:28
msgid ""
"To illustrate, here's an example of a basic design that utilizes components "
"and systems to create four distinct entities:"
msgstr ""

#: src/framework/cairo/overview.md:31
msgid "ECS"
msgstr ""

#: src/framework/cairo/world.md:1
msgid "## World"
msgstr ""

#: src/framework/cairo/world.md:3
msgid ""
"The world contract functions as a central system kernel, serving as the "
"foundation for initiating and resolving all interactions. Within this "
"kernel, contracts are deployed, registered, and executed, streamlining the "
"process for downstream systems by enabling clients to engage with a single "
"contract rather than potentially hundreds."
msgstr ""

#: src/framework/cairo/world.md:6
msgid ""
"> **To think about:** Consider Autonomous Worlds as sovereign blockchains "
"residing within another blockchain - a nested blockchain, so to speak. Just "
"as you can deploy contracts onto Ethereum to enhance its functionality, you "
"can similarly introduce systems into the World contract to enrich its "
"features. While anyone can contribute to the World, akin to Ethereum, "
"authorization is required to interact with component state. There is a "
"dedicated topic to Authorisation."
msgstr ""

#: src/framework/cairo/world.md:9
#: src/framework/cairo/authorization.md:13
msgid "### API"
msgstr ""

#: src/framework/cairo/world.md:11
msgid ""
"```rust,ignore\n"
"// World interface\n"
"#[abi]\n"
"trait IWorld {\n"
"    fn initialize(routes: Array<Route>);\n"
"    fn component(name: ShortString) -> ClassHash;\n"
"    fn register_component(class_hash: ClassHash);\n"
"    fn system(name: ShortString) -> ClassHash;\n"
"    fn register_system(class_hash: ClassHash);\n"
"    fn uuid() -> usize;\n"
"    fn execute(name: ShortString, execute_calldata: Span<felt252>) -> "
"Span<felt252>;\n"
"    fn entity(component: ShortString, key: Query, offset: u8, length: usize) "
"-> Span<felt252>;\n"
"    fn set_entity(component: ShortString, key: Query, offset: u8, value: "
"Span<felt252>);\n"
"    fn entities(component: ShortString, partition: u250) -> (Span<u250>, "
"Span<Span<felt252>>);\n"
"    fn set_executor(contract_address: ContractAddress);\n"
"    fn is_authorized(system: ClassHash, component: ClassHash) -> bool;\n"
"    fn is_account_admin() -> bool;\n"
"    fn delete_entity(component: ShortString, query: Query);\n"
"}\n"
"```"
msgstr ""

#: src/framework/cairo/authorization.md:1
msgid "## Authorization"
msgstr ""

#: src/framework/cairo/authorization.md:3
msgid ""
"As discussed in the [World](./world.md) chapter, Autonomous Worlds (AWs) "
"function as sovereign chains nested within a public blockchain. These Worlds "
"are also open to the public. This structure allows anyone to enhance a World "
"by deploying components or systems. However, this openness brings security "
"considerations. Similar to Ethereum, interacting with a component state by a "
"System requires appropriate authorization by the component owner."
msgstr ""

#: src/framework/cairo/authorization.md:5
msgid "### Architecture"
msgstr ""

#: src/framework/cairo/authorization.md:7
#: src/framework/cairo/authorization.md:11
#: src/framework/cairo/authorization.md:15
msgid "__todo__"
msgstr ""

#: src/framework/cairo/authorization.md:9
#: src/framework/katana/overview.md:21
msgid "### Usage"
msgstr ""

#: src/framework/cairo/components.md:1
msgid "## Components"
msgstr ""

#: src/framework/cairo/components.md:3
msgid ""
"Components serve as the foundation for defining the world's structure, "
"encapsulating state for systems to mutate. For instance, a Position "
"component can be implemented as a struct, exposing `is_zero` and `is_equal` "
"methods. Dojo compiles these components into contracts that can be declared "
"and installed within a world, enabling the creation of diverse and "
"customizable environments."
msgstr ""

#: src/framework/cairo/components.md:5
msgid ""
"When designing a world's components, it is crucial to carefully consider the "
"abstractions you create, always keeping composability in mind."
msgstr ""

#: src/framework/cairo/components.md:7
msgid ""
"Suppose you plan to create two entities that move around the map and are "
"fundamentally different from each other, except for the fact that they both "
"exist within the world. In this case, you could create a shared Position "
"component for both entities. This demonstrates the power of the Entity "
"Component System (ECS) abstraction: by writing a single component, you can "
"reuse it across multiple diverse entities, promoting modularity and "
"flexibility within your world design."
msgstr ""

#: src/framework/cairo/components.md:9
msgid ""
"```rust,ignore\n"
"use array::ArrayTrait;\n"
"\n"
"#[derive(Component, Copy, Drop, Serde)]\n"
"#[component(indexed = true)]\n"
"struct Moves {\n"
"    remaining: u8,\n"
"}\n"
"\n"
"#[derive(Component, Copy, Drop, Serde)]\n"
"struct Position {\n"
"    x: u32,\n"
"    y: u32\n"
"}\n"
"\n"
"trait PositionTrait {\n"
"    fn is_zero(self: Position) -> bool;\n"
"    fn is_equal(self: Position, b: Position) -> bool;\n"
"}\n"
"\n"
"impl PositionImpl of PositionTrait {\n"
"    fn is_zero(self: Position) -> bool {\n"
"        if self.x - self.y == 0 {\n"
"            return true;\n"
"        }\n"
"        false\n"
"    }\n"
"\n"
"    fn is_equal(self: Position, b: Position) -> bool {\n"
"        self.x == b.x && self.y == b.y\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/framework/cairo/systems.md:1
msgid "## Systems"
msgstr ""

#: src/framework/cairo/systems.md:3
msgid ""
"Systems represent functions that operate on the world state. They take input "
"from the user, retrieve the current state from the world, compute a state "
"transition, and apply it. Each system has a single entry point, the execute "
"function. To streamline interaction with the world, systems can utilize\n"
"commands."
msgstr ""

#: src/framework/cairo/systems.md:6
msgid ""
"```rust,ignore\n"
"#[system]\n"
"mod Spawn {\n"
"    use array::ArrayTrait;\n"
"    use traits::Into;\n"
"\n"
"    use dojo::world::Context;\n"
"    use dojo_examples::components::Position;\n"
"    use dojo_examples::components::Moves;\n"
"\n"
"    fn execute(ctx: Context) {\n"
"        set !(\n"
"            ctx.world, ctx.origin.into(), (Moves { remaining: 10 }, Position "
"{ x: 0, y: 0 }, )\n"
"        );\n"
"        return ();\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/framework/cairo/entities.md:1
msgid "## Entities"
msgstr ""

#: src/framework/cairo/entities.md:3
msgid ""
"A common misconception for those new to ECS systems is the way entities "
"exist within the World. Different ECS systems handle entities in various "
"ways. In Dojo, entities are treated as a primary key value within the world, "
"to which components can be attached. To illustrate this concept, consider a "
"simple example of a character in a game that has a position and a health "
"component."
msgstr ""

#: src/framework/cairo/entities.md:5
msgid ""
"When defining the components for this entity, it is important to note that "
"we do not reference the entity directly. Instead, we simply provide two "
"structs that the entity will contain. This approach emphasizes the "
"flexibility and composability of the ECS system, allowing for the easy "
"creation and modification of entities with various combinations of "
"components."
msgstr ""

#: src/framework/cairo/entities.md:7
msgid ""
"```rust,ignore\n"
"#[component]\n"
"struct Position {\n"
"    x: u32,\n"
"    y: u32\n"
"}\n"
"\n"
"#[component]\n"
"struct Health {\n"
"    value: u32,\n"
"}\n"
"\n"
"```"
msgstr ""

#: src/framework/cairo/entities.md:21
msgid ""
"Now, let's create a `SpawnSystem` for the character. It is important to note "
"that we have not explicitly defined an Entity anywhere. Instead, the system "
"will assign a primary key ID to the entity when this system is executed."
msgstr ""

#: src/framework/cairo/entities.md:23
msgid ""
"```rust,ignore\n"
"// The most basic system that creates a new player entity with a given name "
"and 100 health.\n"
"\n"
"#[system]\n"
"mod Spawn {\n"
"    use array::ArrayTrait;\n"
"    use traits::Into;\n"
"\n"
"    use dojo::world::Context;\n"
"    use dojo_examples::components::Position;\n"
"    use dojo_examples::components::Health;\n"
"\n"
"    fn execute(ctx: Context) {\n"
"        set !(\n"
"            ctx.world, ctx.origin.into(), (Moves { remaining: 10 }, Position "
"{ x: 0, y: 0 }, )\n"
"        );\n"
"        return ();\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/framework/cairo/entities.md:44
msgid "Finally, lets move the character with the `MoveSystem`."
msgstr ""

#: src/framework/cairo/entities.md:46
msgid ""
"```rust,ignore\n"
"#[system]\n"
"mod Move {\n"
"    use array::ArrayTrait;\n"
"    use traits::Into;\n"
"\n"
"    use dojo::world::Context;\n"
"    use dojo_examples::components::Position;\n"
"    use dojo_examples::components::Moves;\n"
"\n"
"    #[derive(Serde, Drop)]\n"
"    enum Direction {\n"
"        Left: (),\n"
"        Right: (),\n"
"        Up: (),\n"
"        Down: (),\n"
"    }\n"
"\n"
"    impl DirectionIntoFelt252 of Into<Direction, felt252> {\n"
"        fn into(self: Direction) -> felt252 {\n"
"            match self {\n"
"                Direction::Left(()) => 0,\n"
"                Direction::Right(()) => 1,\n"
"                Direction::Up(()) => 2,\n"
"                Direction::Down(()) => 3,\n"
"            }\n"
"        }\n"
"    }\n"
"\n"
"    fn execute(ctx: Context, direction: Direction) {\n"
"        let (position, moves) = get !(ctx.world, ctx.origin.into(), "
"(Position, Moves));\n"
"        let next = next_position(position, direction);\n"
"        set !(\n"
"            ctx.world,\n"
"            ctx.origin.into(),\n"
"            (Moves { remaining: moves.remaining - 1 }, Position { x: next.x, "
"y: next.y }, )\n"
"        );\n"
"        return ();\n"
"    }\n"
"\n"
"    fn next_position(position: Position, direction: Direction) -> Position "
"{\n"
"        match direction {\n"
"            Direction::Left(()) => {\n"
"                Position { x: position.x - 1, y: position.y }\n"
"            },\n"
"            Direction::Right(()) => {\n"
"                Position { x: position.x + 1, y: position.y }\n"
"            },\n"
"            Direction::Up(()) => {\n"
"                Position { x: position.x, y: position.y - 1 }\n"
"            },\n"
"            Direction::Down(()) => {\n"
"                Position { x: position.x, y: position.y + 1 }\n"
"            },\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/framework/cairo/commands.md:1
msgid "## Commands"
msgstr ""

#: src/framework/cairo/commands.md:3
msgid ""
"Commands in Dojo are generalized functions that are expanded at compile time "
"to facilitate system execution. They provide a convenient way for systems to "
"interact with the world state by abstracting common operations, such as "
"retrieving or updating components, and generating unique IDs. By leveraging "
"these commands, developers can streamline their system implementations and "
"improve code readability."
msgstr ""

#: src/framework/cairo/commands.md:5
msgid ""
"Understanding commands is key to understanding Dojo. You will leverage them "
"heavily within the systems you design."
msgstr ""

#: src/framework/cairo/commands.md:7
msgid ""
"```rust,ignore\n"
"// Update an existing entity by setting its components with the provided "
"values.\n"
"// This function takes a storage key representing the entity and a generic "
"type T for the components to be updated.\n"
"set!(world: IWorldDispatcher, storage_key: StorageKey, components: T);\n"
"\n"
"// Retrieve the components of a specific type T for an entity identified by "
"the storage key.\n"
"// This function returns the components as an instance of the generic type "
"T.\n"
"get!(world: IWorldDispatcher, storage_key: StorageKey, components: T) -> T;\n"
"\n"
"// Retrieve all entity IDs that have components matching the provided type "
"T.\n"
"// This function returns an array of entity IDs (felt252) containing the "
"specified components.\n"
"find!(world: IWorldDispatcher, key: StorageKey, components: T);\n"
"```"
msgstr ""

#: src/framework/cairo/storage.md:1
msgid "# Storage"
msgstr ""

#: src/framework/cairo/storage.md:3
msgid ""
"In a Dojo Autonomous World, the `World` contract serves as the central store "
"that manages and maintains the overall state. No state is maintained at the "
"component level, this allows a clean split in logic and state. Most "
"developers will not need to touch the storage methods, every part of the "
"world can just be maintained via the [commands](./commands.md)."
msgstr ""

#: src/framework/cairo/storage.md:6
msgid "## Detailed overview of Storage"
msgstr ""

#: src/framework/cairo/storage.md:8
msgid ""
"State is maintained via a generated partition when you create a component. "
"The compiler calculates the size of the component along with the key you "
"have used and creates a partition within the world. Think of the partition "
"as a table which can be read from and written to."
msgstr ""

#: src/framework/sozo/overview.md:1
msgid "# Sozo"
msgstr ""

#: src/framework/sozo/overview.md:3
msgid ""
"`sozo` is a powerful migration planning tool designed to streamline the "
"updating and deployment of AWs. It provides a robust binary command-line "
"interface (CLI) that simplifies World management tasks, enabling you to "
"focus on the creative aspects of World-building. Future versions will "
"provide a GUI."
msgstr ""

#: src/framework/sozo/overview.md:5
msgid "## Features"
msgstr ""

#: src/framework/sozo/overview.md:7
msgid ""
"-   **Binary CLI**: Sozo provides an intuitive binary CLI, ensuring easy "
"management of your Worlds, whether you're updating existing ones or "
"deploying new ones."
msgstr ""

#: src/framework/sozo/overview.md:11
msgid ""
"The `sozo` binary can be installed via "
"[`dojoup`](../../getting-started/installation.md#using-dojoup), our "
"dedicated installation package manager."
msgstr ""

#: src/framework/sozo/overview.md:13
msgid "### Installing from Source"
msgstr ""

#: src/framework/sozo/overview.md:15
msgid "If you prefer to install from the source code:"
msgstr ""

#: src/framework/sozo/overview.md:17
msgid ""
"```sh\n"
"cargo install --path ./crates/sozo --profile local --force\n"
"```"
msgstr ""

#: src/framework/sozo/overview.md:21
msgid ""
"This will install Sozo and the required dependencies on your local system."
msgstr ""

#: src/framework/sozo/overview.md:23
msgid ""
"> 📚 **Reference**\n"
">\n"
"> See the [`sozo` Reference](../../reference/sozo/) for a complete overview "
"of all the available subcommands."
msgstr ""

#: src/framework/katana/overview.md:1
msgid "## Katana"
msgstr ""

#: src/framework/katana/overview.md:3
msgid ""
"`katana` is a _blazingly fast_ local Starknet node, designed to support "
"local development with Dojo."
msgstr ""

#: src/framework/katana/overview.md:5
msgid "### Features"
msgstr ""

#: src/framework/katana/overview.md:7
msgid ""
"-   [Starknet JSON-RPC "
"v0.3.0](https://github.com/starkware-libs/starknet-specs/tree/v0.3.0) support"
msgstr ""

#: src/framework/katana/overview.md:11
msgid ""
"`katana` binary is available via "
"[`dojoup`](../../getting-started/installation.md#using-dojoup)."
msgstr ""

#: src/framework/katana/overview.md:13
msgid "### Installing from source"
msgstr ""

#: src/framework/katana/overview.md:15
msgid ""
"```bash\n"
"git clone https://github.com/dojoengine/dojo\n"
"cd dojo\n"
"cargo install --path ./crates/katana --locked --force\n"
"```"
msgstr ""

#: src/framework/katana/overview.md:23
msgid ""
"```console\n"
"$ katana\n"
"\n"
"\n"
"\n"
"██╗  ██╗ █████╗ ████████╗ █████╗ ███╗   ██╗ █████╗\n"
"██║ ██╔╝██╔══██╗╚══██╔══╝██╔══██╗████╗  ██║██╔══██╗\n"
"█████╔╝ ███████║   ██║   ███████║██╔██╗ ██║███████║\n"
"██╔═██╗ ██╔══██║   ██║   ██╔══██║██║╚██╗██║██╔══██║\n"
"██║  ██╗██║  ██║   ██║   ██║  ██║██║ ╚████║██║  ██║\n"
"╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝\n"
"\n"
"\n"
"\n"
"PREFUNDED ACCOUNTS\n"
"==================\n"
"\n"
"| Account address |  "
"0x06f62894bfd81d2e396ce266b2ad0f21e0668d604e5bb1077337b6d570a54aea\n"
"| Private key     |  "
"0x07230b49615d175307d580c33d6fda61fc7b9aec91df0f5c1a5ebe3b8cbfee02\n"
"| Public key      |  "
"0x078e6e3e4a50285be0f6e8d0b8a61044033e24023df6eb95979ae4073f159ae6\n"
"\n"
"| Account address |  "
"0x04b352538f61697825af242c9c451df02a40cca99391a47054489dee82138008\n"
"| Private key     |  "
"0x0326b6d921c2d9c9b76bb641c433c94b030cf57d48803dc742729704ffdd0fc6\n"
"| Public key      |  "
"0x0564a13ba4d4cf95a60f78ca05fc04ff6845736e2f04b3c6703283cdf65e2615\n"
"\n"
"\n"
"🚀 JSON-RPC server started: http://127.0.0.1:5050\n"
"\n"
"\n"
"```"
msgstr ""

#: src/framework/katana/overview.md:54
msgid ""
"> 📚 **Reference**\n"
">\n"
"> See the [`katana` Reference](../../reference/katana/) for in depth "
"information on Anvil and its capabilities."
msgstr ""

#: src/framework/torii/overview.md:1
msgid "## Torii - Networking & Indexing"
msgstr ""

#: src/framework/torii/overview.md:3
msgid ""
"Torii serves as a comprehensive indexing and networking layer for dojo "
"worlds. It systematically organizes the state of dojo worlds, facilitating "
"efficient querying for clients."
msgstr ""

#: src/framework/torii/overview.md:5
msgid "### Indexer"
msgstr ""

#: src/framework/torii/overview.md:7
#: src/framework/torii/overview.md:11
#: src/framework/torii/overview.md:15
msgid "__coming soon__"
msgstr ""

#: src/framework/torii/overview.md:9
msgid "### Graphql"
msgstr ""

#: src/framework/torii/overview.md:13
msgid "### RPC"
msgstr ""

#: src/reference/index.md:1
msgid "## References"
msgstr ""

#: src/reference/index.md:3
msgid "-   [sozo Commands](./sozo/)\n-   [katana Reference](./katana/)"
msgstr ""

#: src/reference/sozo/index.md:1
msgid "## sozo Commands"
msgstr ""

#: src/reference/sozo/index.md:3
msgid ""
"-   [Project Commands](./project-commands.md)\n"
"-   [World Commands](./world-commands.md)"
msgstr ""

#: src/reference/sozo/project-commands.md:1
msgid "## Project Commands"
msgstr ""

#: src/reference/sozo/project-commands.md:3
msgid ""
"-   [init]()\n"
"-   [build]()\n"
"-   [test]()\n"
"-   [migrate]()"
msgstr ""

#: src/reference/sozo/world-commands.md:1
msgid "## World Commands"
msgstr ""

#: src/reference/sozo/world-commands.md:3
msgid ""
"-   [execute]()\n"
"-   [register]()\n"
"-   [system]()\n"
"-   [component]()"
msgstr ""

#: src/reference/katana/index.md:1
msgid "## katana"
msgstr ""

#: src/reference/katana/index.md:3
msgid "### NAME"
msgstr ""

#: src/reference/katana/index.md:5
msgid ""
"katana - Create a local testnet node for deploying and testing Starknet "
"smart contracts."
msgstr ""

#: src/reference/katana/index.md:7
msgid "### SYNOPSIS"
msgstr ""

#: src/reference/katana/index.md:9
msgid "`katana` [*options*]"
msgstr ""

#: src/reference/katana/index.md:11
msgid "### DESCRIPTION"
msgstr ""

#: src/reference/katana/index.md:13
msgid ""
"Create a local testnet node for deploying and testing Starknet smart "
"contracts. Katana supports deployment and execution of version 0 and 1 of "
"Cairo contracts."
msgstr ""

#: src/reference/katana/index.md:15
msgid ""
"This section covers an extensive list of information about Mining Modes, "
"Supported RPC Methods, Katana flags and their usages. You can run multiple "
"flags at the same time."
msgstr ""

#: src/reference/katana/index.md:17
msgid "#### Mining Modes"
msgstr ""

#: src/reference/katana/index.md:19
msgid ""
"Mining modes refer to how frequent blocks are mined using Katana. By "
"default, it automatically generates a new block as soon as a transaction is "
"submitted."
msgstr ""

#: src/reference/katana/index.md:21
msgid ""
"You can change this setting to interval mining if you will, which means that "
"a new block will be generated in a given period of time selected by the "
"user. If you want to go for this type of mining, you can do it by adding the "
"`--block-time <block-time-in-seconds>` flag, like in the following example."
msgstr ""

#: src/reference/katana/index.md:23
msgid ""
"```sh\n"
"# Produces a new block every 10 seconds\n"
"katana --block-time 10\n"
"```"
msgstr ""

#: src/reference/katana/index.md:28
msgid "#### Supported Transport Layers"
msgstr ""

#: src/reference/katana/index.md:30
msgid ""
"Only HTTP connection is supported at the moment. The server listens on port "
"5050 by default, but it can be changed by running the following command:"
msgstr ""

#: src/reference/katana/index.md:32
msgid ""
"```sh\n"
"katana --port <PORT>\n"
"```"
msgstr ""

#: src/reference/katana/index.md:36
msgid "#### Starknet Feature Compatibility"
msgstr ""

#: src/reference/katana/index.md:38
msgid "##### Supported Transaction Type"
msgstr ""

#: src/reference/katana/index.md:40
msgid ""
"| Type           | Version |\n"
"| -------------- | ------- |\n"
"| INVOKE         | 1       |\n"
"| DECLARE        | 1, 2    |\n"
"| DEPLOY_ACCOUNT |         |"
msgstr ""

#: src/reference/katana/index.md:46
msgid "#### Supported RPC Methods"
msgstr ""

#: src/reference/katana/index.md:48
msgid "##### Starknet Methods"
msgstr ""

#: src/reference/katana/index.md:50
msgid ""
"Katana supports version **v0.3.0** of the Starknet JSON-RPC specifications. "
"The standard methods are based on "
"[this](https://github.com/starkware-libs/starknet-specs/tree/v0.3.0) "
"reference."
msgstr ""

#: src/reference/katana/index.md:52
msgid ""
"-   `starknet_blockNumber`\n"
"-   `starknet_blockHashAndNumber`\n"
"-   `starknet_getBlockWithTxs`\n"
"-   `starknet_getBlockWithTxHashes`\n"
"-   `starknet_getBlockTransactionCount`\n"
"-   `starknet_getTransactionByHash`\n"
"-   `starknet_getTransactionByBlockIdAndIndex`\n"
"-   `starknet_getTransactionReceipt`\n"
"-   `starknet_pendingTransactions`\n"
"-   `starknet_getStateUpdate`\n"
"\n"
"-   `starknet_call`\n"
"-   `starknet_estimateFee`\n"
"\n"
"-   `starknet_chainId`\n"
"\n"
"-   `starknet_getNonce`\n"
"-   `starknet_getEvents`\n"
"-   `starknet_getStorageAt`\n"
"-   `starknet_getClassHashAt`\n"
"-   `starknet_getClass`\n"
"-   `starknet_getClassAt`\n"
"\n"
"-   `starknet_syncing`\n"
"\n"
"-   `starknet_addInvokeTransaction`\n"
"-   `starknet_addDeclareTransaction`\n"
"-   `starknet_addDeployAccountTransaction`"
msgstr ""

#: src/reference/katana/index.md:81
msgid "##### Custom Methods"
msgstr ""

#: src/reference/katana/index.md:83
msgid ""
"Katana provides a convenient set of custom RPC methods to quickly and easily "
"configure the node to suit your testing environment."
msgstr ""

#: src/reference/katana/index.md:85
msgid ""
"`katana_generateBlock`  \n"
"Mine a new block which includes all currently pending transactions"
msgstr ""

#: src/reference/katana/index.md:88
msgid "`katana_nextBlockTimestamp`  \nGet the time for the next block"
msgstr ""

#: src/reference/katana/index.md:91
msgid ""
"`katana_increaseNextBlockTimestamp`  \n"
"Increase the time for the block by a given amount of time, in seconds"
msgstr ""

#: src/reference/katana/index.md:94
msgid ""
"`katana_setNextBlockTimestamp`  \n"
"Similar to `katana_increaseNextBlockTimestamp` but takes the exact timestamp "
"that you want in the next block"
msgstr ""

#: src/reference/katana/index.md:97
msgid ""
"`katana_predeployedAccounts`  \n"
"Get the info for all of the predeployed accounts"
msgstr ""

#: src/reference/katana/index.md:100
msgid "### OPTIONS"
msgstr ""

#: src/reference/katana/index.md:102
msgid "#### General Options"
msgstr ""

#: src/reference/katana/index.md:104
msgid "`--silent`  \n&nbsp;&nbsp;&nbsp;&nbsp; Don't print anything on startup"
msgstr ""

#: src/reference/katana/index.md:107
msgid ""
"`--no-mining`  \n"
"&nbsp;&nbsp;&nbsp;&nbsp; Disable auto and interval mining, and mine on "
"demand instead"
msgstr ""

#: src/reference/katana/index.md:110
msgid ""
"`-b, --block-time <SECONDS>`  \n"
"&nbsp;&nbsp;&nbsp;&nbsp; Block time in seconds for interval mining"
msgstr ""

#: src/reference/katana/index.md:113
msgid ""
"`-h, --help`  \n"
"&nbsp;&nbsp;&nbsp;&nbsp; Print help (see a summary with '-h')"
msgstr ""

#: src/reference/katana/index.md:116
msgid "`-V, --version`  \n&nbsp;&nbsp;&nbsp;&nbsp; Print version information"
msgstr ""

#: src/reference/katana/index.md:119
msgid "#### Server Options"
msgstr ""

#: src/reference/katana/index.md:121
msgid ""
"`-p, --port <PORT>`  \n"
"&nbsp;&nbsp;&nbsp;&nbsp; Port number to listen on [default: 5050]"
msgstr ""

#: src/reference/katana/index.md:124
msgid ""
"`--host <HOST>`  \n"
"&nbsp;&nbsp;&nbsp;&nbsp; The IP address the server will listen on"
msgstr ""

#: src/reference/katana/index.md:127
msgid "#### Starknet Options"
msgstr ""

#: src/reference/katana/index.md:129
msgid ""
"`--seed <SEED>`  \n"
"&nbsp;&nbsp;&nbsp;&nbsp; Specify the seed for randomness of accounts to be "
"predeployed"
msgstr ""

#: src/reference/katana/index.md:132
msgid ""
"`--accounts <NUM>`  \n"
"&nbsp;&nbsp;&nbsp;&nbsp; Number of pre-funded accounts to generate [default: "
"10]"
msgstr ""

#: src/reference/katana/index.md:135
msgid ""
"`--allow-zero-max-fee`  \n"
"&nbsp;&nbsp;&nbsp;&nbsp; Allow transaction max fee to be zero"
msgstr ""

#: src/reference/katana/index.md:138
msgid "#### Environment Options"
msgstr ""

#: src/reference/katana/index.md:140
msgid ""
"`--chain-id <CHAIN_ID>`  \n"
"&nbsp;&nbsp;&nbsp;&nbsp; The chain ID [default: KATANA]"
msgstr ""

#: src/reference/katana/index.md:143
msgid "`--gas-price <GAS_PRICE>`  \n&nbsp;&nbsp;&nbsp;&nbsp; The gas price"
msgstr ""

#: src/reference/katana/index.md:146
msgid "### EXAMPLES"
msgstr ""

#: src/reference/katana/index.md:148
msgid "1. Set the number of accounts to 15 and allow zero fee transaction"
msgstr ""

#: src/reference/katana/index.md:150
msgid ""
"```sh\n"
"katana --accounts 15 --allow-zero-max-fee\n"
"```"
msgstr ""

#: src/reference/katana/index.md:154
msgid "2. Set the chain id SN_GOERLI and run the server on port 8545"
msgstr ""

#: src/reference/katana/index.md:156
msgid ""
"```sh\n"
"katana --chain-id SN_GOERLI --port 8545\n"
"```"
msgstr ""

#: src/misc/contributors.md:1
msgid "## Contributing to Dojo Book"
msgstr ""

#: src/misc/contributors.md:3
msgid ""
"As the Dojo engine progresses and develops, it is essential for the Dojo "
"book to keep pace with these advancements. Updating and refining the book "
"ensures that it remains a relevant and valuable resource for those "
"interested in understanding and utilizing the latest Dojo engine features "
"and capabilities. All help is welcome!"
msgstr ""

#: src/misc/contributors.md:5
msgid "### The purpose of the book"
msgstr ""

#: src/misc/contributors.md:7
msgid ""
"The Dojo book is designed to be a comprehensive resource that caters to "
"users at various levels of experience. It aims to serve as both an "
"introductory guide for those new to Dojo and its ancillary packages, as well "
"as a reference for more experienced users seeking to deepen their "
"understanding of the engine's features and capabilities."
msgstr ""

#: src/misc/contributors.md:9
msgid "The book is split into some major chapters:"
msgstr ""

#: src/misc/contributors.md:11
msgid ""
"- Framework Theory\n"
"- Getting Started\n"
"- Building a World"
msgstr ""

#: src/misc/contributors.md:15
msgid "### Code of Conduct"
msgstr ""

#: src/misc/contributors.md:17
msgid ""
"The book follows the [Rust Code of "
"Conduct](https://www.rust-lang.org/policies/code-of-conduct)."
msgstr ""

#: src/misc/contributors.md:19
msgid "### Ways to contribute"
msgstr ""

#: src/misc/contributors.md:21
msgid "#### Issues"
msgstr ""

#: src/misc/contributors.md:23
msgid ""
"If you think that some content is missing or out-of-date, feel free to open "
"an issue. If you find multiple pieces of content lacking, please open up a "
"separate issue for each."
msgstr ""

#: src/misc/contributors.md:25
msgid ""
"The issues will then be labeled so other contributors can find chunks of "
"work they are interested in more easily."
msgstr ""

#: src/misc/contributors.md:27
msgid ""
"The issue should contain what is missing, or what could be improved, in as "
"much detail as you deem necessary."
msgstr ""

#: src/misc/contributors.md:29
msgid "#### Pull requests"
msgstr ""

#: src/misc/contributors.md:31
msgid ""
"Feel free to contribute changes to the book by opening a pull request - "
"anything is welcome, from reformulating a sentence, fixing a typo, to adding "
"new sections or chapters."
msgstr ""

#: src/misc/contributors.md:33
msgid ""
"When your pull request is open, other contributors will take a look and may "
"request changes. Do not be discouraged!"
msgstr ""

#: src/misc/contributors.md:35
msgid "### Writing style"
msgstr ""

#: src/misc/contributors.md:37
msgid ""
"This section documents a few standards for writing used throughout the book."
msgstr ""

#: src/misc/contributors.md:39
msgid "#### Chapters start with a second level heading"
msgstr ""

#: src/misc/contributors.md:41
msgid "We use:"
msgstr ""

#: src/misc/contributors.md:43
msgid ""
"```md\n"
"## Some Page\n"
"```"
msgstr ""

#: src/misc/contributors.md:47
msgid "We do not use:"
msgstr ""

#: src/misc/contributors.md:49
msgid ""
"```md\n"
"# Some Page\n"
"```"
msgstr ""

